 

%Optimal control with system identification - S. Jagannathan
%UR10

clear all; close all; clc;
tic;



alpha=0.02;  v=100; K=20;
Q=[1 0 0 0 ; 0 1 0 0; zeros(2,4)];
R=eye(2);

%2 dof. total 4 states - 2 joint position angles, 2 joint angle velocities, 2 joint angle accelerations.
th1=0;th2=0;
th1ddot=0; th2ddot=0;
th1dot=0;th2dot=0;

x0=[th1dot;th2dot]; %initial states
i=1;

%desired states
dt=.01;
T=100;
time=0:dt:T;
th1_desired= -sin(time);
 th2_desired= -cos(time);
th1dot_desired= -cos(time);%states
th2dot_desired= sin(time);%states
th1ddot_desired=sin(time);
th2ddot_desired=cos(time);

xr=[th1dot_desired;th2dot_desired];
xr0=xr(:,1);
zeta_dot=[x0-xr0;xr0];
zetadot_hat=zeta_dot;
states=4;
zetadot_prev=[0;0;0;0];
zeta=[th1-th1_desired; th2-th2_desired; th1_desired; th2_desired];

nodes=1;
states=4;
w1=rand(states,nodes);
w=rand(nodes,1);
lam=1;
 m1=1;m2=1;l1=1;l2=1;gr=-9.8;
 k=1;


for t=0:dt:T

  w11=[zeta_dot(1:2,k)];
   w1=[w11;w11]; %since number of nodes=1, we need only 4*1 weight vector   
  %w1=[w11 w11;w11 w11];
         lay=zeta_dot(:,k)'*w1;
      phi(k)=2./(1+exp(-2*lam*lay))-1;
  
    
        for nm=1:states
            for nn=1:nodes
                %del_phi(nn,nm)=w1(nm,nn)*lam*phi(1,nn)*(1-phi(1,nn));
                del_phi(nn,nm)=w1(nm,nn)*lam*(1-phi(1,nn)^2);
            end
        end
        
%          c=w1;
%      phi(1)=exp(-norm((X(:,k)-c),2)^2/(2*sigma^2));
%   
%     
%         for nm=1:states
%             for nn=1:nodes
%                 %del_phi(nn,nm)=w1(nm,nn)*lam*phi(1,nn)*(1-phi(1,nn));
%                 %del_phi(nn,nm)=w1(nm,nn)*lam*(1-phi(1,nn)^2);
%                 del_phi(nn,nm)=-(1/sigma^2)*exp(-norm((X(:,k)-c),2)^2/(2*sigma^2))*(X(nm,k)-c(nn,1));
%             end
%         end
%        
        
       
        
        V(:,k)=w(:,k)'*phi(k)';
  del_V=del_phi'*w(:,k);
  
  

  %Actual system dynamics
       
th1=zeta(1,k)+zeta(3,k);
th2=zeta(2,k)+zeta(4,k);

th1dot=zeta_dot(1,k)+zeta_dot(3,k);
th2dot=zeta_dot(2,k)+zeta_dot(4,k);
 
%M =[ 2*cos(conj(th2)) + 3 cos(conj(th2)) + 1;  cos(conj(th2)) + 1 1];

%f=[- sin(conj(th2))*conj(dth2)^2 - 2*sin(conj(th2))*conj(dth1)*conj(dth2);sin(conj(th2))*conj(dth1)^2];
%g=[gr*(2*cos(conj(th1)) + cos(conj(th1) + conj(th2)));gr*cos(conj(th1) + conj(th2))];

 
%% Mass matrix terms
m11=(l2)^2*m2+2*l1*l2*m2*cos(th2dot)+(l1)^2*(m1+m2);
m12=(l2)^2*m2+l1*l2*m2*cos(th2dot);
m21=(l2)^2*m2+l1*l2*m2*cos(th2dot);
m22=(l2)^2*m2;


% mass matrix
M = [m11,m12;
     m21,m22];
%% gravity vector
g1=m2*l2*cos(th1dot+th2dot)+(m1+m2)*l1*cos(th1dot);
g2=m2*l2*cos(th1dot+th2dot);

g = gr * [g1;g2];

%% vector of other effects
n1=-m2*l1*l2*sin(th2dot)*(th2dot)^2-2*m2*l1*l2*sin(th2dot);
n2=m2*l1*l2*sin(th2dot)*(th1dot)^2;
f = [n1;n2];
 
 % F=[-inv(M)*(f+g)-[th1ddot_desired(k);th2ddot_desired(k)];th1ddot_desired(k);th2ddot_desired(k)];
 F=[-inv(M)*(f+g)-[zeta_dot(4,k);-zeta_dot(3,k)];zeta_dot(4,k);-zeta_dot(3,k)];
  G=[inv(M);0 0; 0 0];
  
 
%control law
u(:,k)= -0.5*inv(R)*G'*(del_phi'*w(:,k)); 
zeta_doubledot=(F+G*u(:,k));
zeta_dot(:,k+1)=zeta_dot(:,k)+dt*(F+G*u(:,k));
X(3:4,k+1)=[th1dot_desired(k);th2dot_desired(k)];

zeta(:,k+1)=zeta(:,k)+dt*zeta_dot(:,k);

%estimating F and X
  F_hat=-(Q-G*inv(R)*G'/4)*del_phi'*w(:,k);
zetadot_hat(:,k+1)=zetadot_hat(:,k)+dt*(F_hat+G*u(:,k)+K*(zeta_dot(:,k)-zetadot_hat(:,k)));

fff(:,k)=F;
fff_hat(:,k)=F_hat;

%Weight Updation
J_X=zetadot_hat(:,k);
wdot=0.5*alpha*del_phi*G*inv(R)*G'*J_X-alpha*v*del_phi*(Q-G*inv(R)*G'/4)*(zeta_dot(:,k)-zetadot_hat(:,k));
w(:,k+1)=w(:,k)+dt*(wdot);
cost(k)=del_V'*Q*del_V+u(:,k)'*R*u(:,k);
k=k+1;
end

disp('final weights')
w(:,end)
tim=0:dt:T;
toc;

%plots
 plot(tim,zeta_dot(1,2:end))
hold on;
plot(tim,zeta_dot(2,2:end));
title('Error Trajectories of state 1 and 2')
xlabel('Time (sec)')
ylabel('Error Trajectories')
legend('e1-Error1' ,'e2-Error2')
grid on;

figure;
plot(tim,zeta_dot(2,2:end)+zeta_dot(4,2:end))
hold on;
plot(tim,zeta_dot(4,2:end))
title('Desired and Actual Trajectories of State 2')
xlabel('Time (sec)')
ylabel('Desired trajectory and Actual trajectory')
legend('Xd2-Actual' ,'X2-Desired')
grid on;

figure;
 plot(tim,zeta_dot(1,2:end)+zeta_dot(3,2:end))
hold on;
plot(tim,zeta_dot(3,2:end))
title('Desired and Actual Trajectories of State 1')
xlabel('Time (sec)')
ylabel('Desired trajectory and Actual trajectory')
legend('Xd1-Actual' ,'X1-Desired')
grid on;

% figure;
% plot(tim,fff(1,:)-fff_hat(1,:))
% hold on;
% plot(tim,fff(2,:)-fff_hat(2,:))
% title('Augmented System dynamics erros - F-Fhat')
% xlabel('Time (sec)')
% ylabel('F-Fhat, error of System Dynamics (F)')
% legend('error1_F' ,'error2_F')
% grid on;

figure;
plot(tim,cost)
title('Optimal cost of the system')
xlabel('Time (sec)')
ylabel('Optimal cost, C')
legend('C')
grid on;



figure;
plot(fff(2,:))
hold on;
plot(fff_hat(2,:))
title('Augmented System dynamics (F) of state 2')
xlabel('Time (sec)')
ylabel('Actual and Estimated F')
legend('F2-Actual' ,'F_h2-Estimated')
grid on;
% 
figure;
plot(tim,w(1,2:end))
% hold on;
% plot(tim,w(2,2:end))
% plot(tim,w(3,2:end))
% plot(tim,w(4,2:end))
% plot(tim,w(5,2:end))
% plot(tim,w(6,2:end))
% plot(tim,w(7,2:end))
title('Evolution of Weights')
%legend('w1','w2','w3','w4','w5','w6','w7')
xlabel('Time(sec)')
ylabel('Weights')
